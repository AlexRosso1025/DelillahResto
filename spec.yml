swagger: "2.0"
info:
  description: "Documentation Delillah Restó API"
  version: "1.0.0"
  title: "Delillah Restó"
  termsOfService: "http://swagger.io/terms/"
  contact:
    url: "http://alexrosso.000webhostapp.com/"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:3000"
basePath: "/v1"
tags:
- name: "Delillah Restó"
  description: "Project"
  externalDocs:
    description: "Find out more"
    url: "https://acamica.com"
schemes:
- "https"
- "http"
paths:
  /products:
    get:
      tags:
        - "products"
      summary: "Get all products"
      description: "Return all products in store"
      operationId: "getProducts"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          name: "token"
          description: "authentication token"
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/get_product"
              
    post:
      tags:
        - "products"
      summary: "Create a new Product"
      description: "Return new product created if operation is successful"
      operationId: "createProduct"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          name: "token"
          description: "authentication token admin"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Product that needs to be add"
          required: true
          schema:
            $ref: "#/definitions/create_product"
            
      responses:
        "201":
          description: "new Product created"
        "400":
          description: "Missing Arguments"
        "401":
          description: "Token expired. Login again"
        "403":
          description: "You don't have permissions"
  
  /products/{productId}:
    put:
      tags:
        - "products"
      summary: "Update a product"
      description: "Response updated product if operation is successful"
      operationId: "updateProduct"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "productId"
          in: "path"
          description: "Id product to update"
          required: true
          type: "integer"
          
        - in: "header"
          name: "token"
          description: "authentication token admin"
          required: true
          type: "string"
          
        - in: "body"
          name: "body"
          description: "Product that needs to be update"
          required: true
          schema:
            $ref: "#/definitions/create_product"
      responses:
        "200":
          description: "new Product created"
          schema:
            $ref: "#/definitions/get_product"
        "400":
          description: "Missing Arguments"
        "401":
          description: "Token expired. Login again"
        "403":
          description: "You don't have permissions"
        "404":
          description: "Product not found"
    
    delete:
      tags:
        - "products"
      summary: "Deletes a product"
      description: "Response not content if operation is successful"
      parameters:  
        - name: "productId"
          in: "path"
          description: "Id product to update"
          required: true
          type: "integer"
          
        - in: "header"
          name: "token"
          description: "authentication token admin"
          required: true
          type: "string"
      responses:
        "204":
          description: ""
        "401":
          description: "Token expired. Login again"
        "403":
          description: "You don't have permissions"
        "404":
          description: "Product not found"
    


definitions:
  get_product:
    type: "object"
    required: 
      - "product_name"
      - "price"
    properties:
      product_id:
        type: "integer"
        format: "int64"
      product_name:
        type: "string"
        example: "burguer"
      price:
        type: "number"
        example: "10000"
        
  create_product:
    type: "object"
    required: 
      - "product_name"
      - "price"
    properties:
      product_name:
        type: "string"
        example: "burguer"
      price:
        type: "number"
        example: "10000"
  
      